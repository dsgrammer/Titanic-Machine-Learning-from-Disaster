setwd("C:/Users/dsgra/OneDrive/Documents/GitHub/Titanic-Machine-Learning-from-Disaster")
library(tidyverse)
train <- readr::read_csv('C:/Users/dsgra/OneDrive/Documents/GitHub/Titanic-Machine-Learning-from-Disaster/00 Data/train.csv')
test <- readr::read_csv('C:/Users/dsgra/OneDrive/Documents/GitHub/Titanic-Machine-Learning-from-Disaster/00 Data/test.csv')
# Fitting XGBoost to the Training set
# install.packages('xgboost')
library(xgboost)
classifier = xgboost(data = as.matrix(train[2]), label = train$Survived, nrounds = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = as.matrix(test[1,11]))
View(train)
train[2]
classifier = xgboost(data = as.matrix(train[-2]), label = train$Survived, nrounds = 10)
# Fitting XGBoost to the Training set
# install.packages('xgboost')
library(xgboost)
classifier = xgboost(data = as.matrix(train[-2]), label = train$Survived, nrounds = 10)
train <- readr::read_csv('C:/Users/dsgra/OneDrive/Documents/GitHub/Titanic-Machine-Learning-from-Disaster/00 Data/train.csv')
test <- readr::read_csv('C:/Users/dsgra/OneDrive/Documents/GitHub/Titanic-Machine-Learning-from-Disaster/00 Data/test.csv')
# Fitting XGBoost to the Training set
# install.packages('xgboost')
library(xgboost)
classifier = xgboost(data = as.matrix(train[-2]), label = train$Survived, nrounds = 10)
str(train)
train = read.csv('C:/Users/dsgra/OneDrive/Documents/GitHub/Titanic-Machine-Learning-from-Disaster/00 Data/train.csv',
na.strings = c(""), stringsAsFactors=TRUE)
test = read.csv('C:/Users/dsgra/OneDrive/Documents/GitHub/Titanic-Machine-Learning-from-Disaster/00 Data/train.csv',
na.strings = c(""), stringsAsFactors=TRUE)
test = read.csv('C:/Users/dsgra/OneDrive/Documents/GitHub/Titanic-Machine-Learning-from-Disaster/00 Data/test.csv',
na.strings = c(""), stringsAsFactors=TRUE)
str(train)
train$Survived <- factor(train$Survived)
str(train)
train$Pclass <- factor(train$Pclass)
str(train)
a[is.na(train)]
train[is.na(train)]
is.na(train)
train_backup <- train
train[!complete.cases(df),]
train[!complete.cases(train),]
df[!complete.cases(df),]
train[!complete.cases(train),]
#Cabin variable is nearly all NA, dropping as it is impossible to estimate cabin numbers
train <- subset(train,select = -c(Cabin))
str(train)
train[!complete.cases(train),]
train[complete.cases(train),]
train[!complete.cases(train),]
count(is.na(train$Age))
count(!complete.cases(train$Age))
nrow(!complete.cases(train$Age))
nrow(is.na(train$Age))
nrow((train$Age))
count((train$Age))
table((train$Age))
table1((train$Age))
table1((train$Age))
?table
table(train$Age, useNA = 'always')
train[!complete.cases(train),]
train[!complete.cases(train),]
table(train$PassengerId, useNA = 'always')
str(train)
table(train$Survived, useNA = 'always')
table(train$Pclass, useNA = 'always')
table(train$Name, useNA = 'always')
str(train)
table(train$Sex, useNA = 'always')
table(train$SibSp, useNA = 'always')
table(train$Parch, useNA = 'always')
table(train$Ticket, useNA = 'always')
table(train$Parch, useNA = 'always')
str(train)
table(train$Fare, useNA = 'always')
table(train$Embarked, useNA = 'always')
#Age has 177 NAs, how to fill...
table(train$Age, useNA = 'always')
table(train$PassengerId, useNA = 'always')
# table(train$PassengerId, useNA = 'always')
table(train$Pclass, useNA = 'always')
# table(train$PassengerId, useNA = 'always')
# table(train$Pclass, useNA = 'always')
table(train$Name, useNA = 'always')
# table(train$PassengerId, useNA = 'always')
# table(train$Pclass, useNA = 'always')
# table(train$Name, useNA = 'always')
table(train$Sex, useNA = 'always')
# table(train$PassengerId, useNA = 'always')
# table(train$Pclass, useNA = 'always')
# table(train$Name, useNA = 'always')
# table(train$Sex, useNA = 'always')
table(train$SibSp, useNA = 'always')
# table(train$PassengerId, useNA = 'always')
# table(train$Pclass, useNA = 'always')
# table(train$Name, useNA = 'always')
# table(train$Sex, useNA = 'always')
# table(train$SibSp, useNA = 'always')
table(train$Parch, useNA = 'always')
# table(train$PassengerId, useNA = 'always')
# table(train$Pclass, useNA = 'always')
# table(train$Name, useNA = 'always')
# table(train$Sex, useNA = 'always')
# table(train$SibSp, useNA = 'always')
# table(train$Parch, useNA = 'always')
table(train$Ticket, useNA = 'always')
# table(train$PassengerId, useNA = 'always')
# table(train$Pclass, useNA = 'always')
# table(train$Name, useNA = 'always')
# table(train$Sex, useNA = 'always')
# table(train$SibSp, useNA = 'always')
# table(train$Parch, useNA = 'always')
# table(train$Ticket, useNA = 'always')
table(train$Fare, useNA = 'always')
# table(train$PassengerId, useNA = 'always')
# table(train$Pclass, useNA = 'always')
# table(train$Name, useNA = 'always')
# table(train$Sex, useNA = 'always')
# table(train$SibSp, useNA = 'always')
# table(train$Parch, useNA = 'always')
# table(train$Ticket, useNA = 'always')
# table(train$Fare, useNA = 'always')
table(train$Embarked, useNA = 'always')
train <- train[!is.na(train$Embarked)]
train <- train[!is.na(train$Embarked),]
# table(train$PassengerId, useNA = 'always')
# table(train$Pclass, useNA = 'always')
# table(train$Name, useNA = 'always')
# table(train$Sex, useNA = 'always')
# table(train$SibSp, useNA = 'always')
# table(train$Parch, useNA = 'always')
# table(train$Ticket, useNA = 'always')
# table(train$Fare, useNA = 'always')
# Two passengers did not board the titanic
table(train$Embarked, useNA = 'always')
summary(train$Age)
str(test)
train$Pclass <- factor(train$Pclass)
str(test)
test$Pclass <- factor(test$Pclass)
str(test)
test_backup <- test
str(train)
table(test$Cabin, useNA = 'always')
test <- subset(test,select = -c(Cabin))
table(train$Age, useNA = 'always')
summary(train$Age)
table(train$PassengerId, useNA = 'always')
# table(train$PassengerId, useNA = 'always')
table(train$Pclass, useNA = 'always')
# table(train$PassengerId, useNA = 'always')
# table(train$Pclass, useNA = 'always')
table(train$Name, useNA = 'always')
# table(train$PassengerId, useNA = 'always')
# table(train$Pclass, useNA = 'always')
# table(train$Name, useNA = 'always')
table(train$Sex, useNA = 'always')
# table(train$PassengerId, useNA = 'always')
# table(train$Pclass, useNA = 'always')
# table(train$Name, useNA = 'always')
# table(train$Sex, useNA = 'always')
table(train$SibSp, useNA = 'always')
# table(train$PassengerId, useNA = 'always')
# table(train$Pclass, useNA = 'always')
# table(train$Name, useNA = 'always')
# table(train$Sex, useNA = 'always')
# table(train$SibSp, useNA = 'always')
table(train$Parch, useNA = 'always')
# table(train$PassengerId, useNA = 'always')
# table(train$Pclass, useNA = 'always')
# table(train$Name, useNA = 'always')
# table(train$Sex, useNA = 'always')
# table(train$SibSp, useNA = 'always')
# table(train$Parch, useNA = 'always')
table(train$Ticket, useNA = 'always')
# table(train$PassengerId, useNA = 'always')
# table(train$Pclass, useNA = 'always')
# table(train$Name, useNA = 'always')
# table(train$Sex, useNA = 'always')
# table(train$SibSp, useNA = 'always')
# table(train$Parch, useNA = 'always')
# table(train$Ticket, useNA = 'always')
table(train$Fare, useNA = 'always')
# Two passengers did not board the titanic, dropped
table(test$Embarked, useNA = 'always')
#----------------------------------------------------------------------------------
# Fitting XGBoost to the Training set
# install.packages('xgboost')
library(xgboost)
train[2]
classifier = xgboost(data = as.matrix(train[-2]), label = train$Survived, nrounds = 10)
?xgboost
str(train)
data <- as.matrix(train[-2])
label <- as.numeric(train$Survived)
classifier = xgboost(data = data, label = label, nrounds = 10)
mode(data) <- 'Double'
mode(data) <- 'double'
data <- as.numeric(as.matrix(train[-2]))
table(data, useNA = 'always')
data
# mode(data) <- 'double'
classifier = xgboost(data = data, label = label, nrounds = 10)
data <- as.matrix(train[-2])
# mode(data) <- 'double'
classifier = xgboost(data = data, label = label, nrounds = 10)
mode(data) <- 'double'
classifier = xgboost(data = data, label = label, nrounds = 10)
test[2]
?predict
?predict.xgb.Booster
# Predicting the Test set results
y_pred = predict(classifier, newdata = as.matrix(test))
# Predicting the Test set results
y_pred = predict(classifier, newdata = as.matrix(test[11]))
test <- Test %>%
add_column()
test <- test %>%
add_column()
View(test)
test <- test %>%
add_column(empty_column = NA)
View(test)
# Predicting the Test set results
y_pred = predict(classifier, newdata = as.matrix(test[11]))
?add_column
# Predicting the Test set results
y_pred = predict(classifier)
# Predicting the Test set results
y_pred = predict(classifier, newdata = as.matrix(test[]))
# Predicting the Test set results
y_pred = predict(classifier, newdata = as.matrix(test[11]))
# Predicting the Test set results
y_pred = predict(classifier, newdata = as.matrix(test[-11]))
# Predicting the Test set results
newdata = as.matrix(test[-11])
mode(newdata) <- 'double'
y_pred = predict(classifier, newdata = newdata)
y_pred = (y_pred >= 0.5)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
# Making the Confusion Matrix
cm = table(test[, 11], y_pred)
cm
# Making the Confusion Matrix
cm = table(test[11], y_pred)
# Making the Confusion Matrix
cm = table(test, y_pred)
y_pred
View(newdata)
View(newdata)
View(data)
classifier = xgboost(data = data, label = label, nrounds = 10, objective = "binary:logistic")
data <- as.matrix(train[-2])
label <- as.numeric(train$Survived)
classifier = xgboost(data = data, label = label, nrounds = 10, objective = "binary:logistic")
